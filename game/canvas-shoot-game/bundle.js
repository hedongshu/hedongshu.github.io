!function(e){var t={};function s(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=e,s.c=t,s.d=function(e,t,i){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)s.d(i,n,function(t){return e[t]}.bind(null,n));return i},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=0)}({0:function(e,t,s){"use strict";s.r(t);const i=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(e){window.setTimeout(e,1e3/30)};var n={status:"start",level:1,totalLevel:6,numPerLine:6,canvasPadding:30,bulletSize:10,bulletSpeed:10,enemySpeed:2,enemySize:50,enemyGap:10,enemyIcon:"./img/enemy.png",enemyBoomIcon:"./img/boom.png",enemyDirection:"right",planeSpeed:5,planeSize:{width:60,height:100},planeIcon:"./img/plane.png"};class a{constructor(e){this.x=e.x,this.y=e.y,this.size=e.size,this.speed=e.speed}move(e,t){let s=e||0,i=t||0;this.x+=s,this.y+=i}draw(){}}class o extends a{constructor(e){super(e),this.status="normal",this.icon=e.icon,this.boomIcon=e.boomIcon,this.count=0}booming(){this.status="booming",this.count++,this.count>=3&&(this.status="died")}translate(e){let t="left"===e?-this.speed:this.speed;this.move(t,0)}down(){this.move(0,this.size)}draw(){switch(this.status){case"normal":m.drawImage(this.icon,this.x,this.y,this.size,this.size);break;case"booming":m.drawImage(this.boomIcon,this.x,this.y,this.size,this.size)}}}class l extends a{constructor(e){super(e)}up(){this.move(0,-this.speed)}draw(){m.fillStyle="#fff",m.fillRect(this.x,this.y,1,this.size)}crash(e){return!(e.x+e.size<this.x||this.x+1<e.x||e.y+e.size<this.y||this.y+this.size<e.y)}}s(8);s.d(t,"context",function(){return m});let r=document.getElementById("game"),h=document.querySelector(".game-level"),c=document.querySelector(".game-next-level");var u=document.querySelector(".game-info .score"),d=document.querySelector(".game-info-text .score");let p=document.getElementById("canvas"),m=p.getContext("2d"),y=p.clientWidth,f=p.clientHeight;({init:function(e){e=Object.assign({},e,n),this.opts=e;let t=this;this.status=this.opts.status||"start",h.innerText=`当前Level: ${e.level}`,this.score=0,this.Keyboard=new class{constructor(){document.addEventListener("keydown",e=>{this.keydown(e)}),document.addEventListener("keyup",e=>{this.keyup(e)}),this.pressLeft=!1,this.pressRight=!1,this.pressSpace=!1}keydown(e){switch(e.keyCode){case 37:this.pressLeft=!0,this.pressRight=!1;break;case 39:this.pressRight=!0,this.pressLeft=!1;break;case 32:this.pressSpace=!0}}keyup(e){switch(e.keyCode){case 37:this.pressLeft=!1;break;case 39:this.pressRight=!1;break;case 32:this.pressSpace=!1}}},function(e,t){let s=e.length,i=0,n=[];e.forEach(function(e,a){n[a]=new Image,n[a].src=e,n[a].onload=(()=>{++i===s&&t(n)})})}([e.enemyIcon,e.enemyBoomIcon,e.planeIcon],s=>{e.enemyIconImage=s[0],e.enemyBoomIconImage=s[1],e.planeIconImage=s[2],t.opts=e,this.bindEvent()})},bindEvent:function(){var e=this,t=document.querySelector(".js-play"),s=document.querySelectorAll(".js-replay"),i=document.querySelector(".js-next");t.onclick=function(){e.play()},s.forEach(function(t){t.onclick=function(){e.opts.level=1,e.play(),e.score=0,d.innerText=e.score}}),i.onclick=function(){e.opts.level+=1,e.play()}},setStatus:function(e){this.status=e,r.setAttribute("data-status",e)},play:function(){let e=this.opts,t=e.canvasPadding,s=e.level,i=e.numPerLine,n=(e.totalLevel,e.enemySize),r=e.enemySpeed,h=e.enemyGap,c=e.enemyIconImage,p=e.enemyBoomIconImage;this.enemys=[];for(let e=0;e<s;e++)for(let s=0;s<i;s++){let i={x:s*(n+h)+t,y:e*n+t,speed:r,icon:c,boomIcon:p,size:n};this.enemys.push(new o(i))}let g={x:(y-e.planeSize.width)/2,y:f-t-e.planeSize.height,speed:e.planeSpeed,size:e.planeSize,icon:e.planeIconImage,minX:e.canvasPadding,maxX:y-e.canvasPadding-e.planeSize.width,bulletSize:e.bulletSize,bulletSpeed:e.bulletSpeed};this.plane=new class extends a{constructor(e){super(e),this.icon=e.icon,this.minX=e.minX,this.maxX=e.maxX,this.bullets=[],this.bulletSize=e.bulletSize,this.bulletSpeed=e.bulletSpeed,this.lastShoot=Date.now()}shoot(){if(Date.now()-this.lastShoot>200){let e={x:this.x+this.size.width/2,y:this.y,size:this.bulletSize,speed:this.bulletSpeed};this.bullets.push(new l(e)),this.lastShoot=new Date}}translate(e){let t="left"===e?-this.speed:this.speed;this.move(t,0)}hasHit(e){let t=!1;for(let s=this.bullets.length-1;s>=0;s--)if(this.bullets[s].crash(e)){this.bullets.splice(s,1),t=!0;break}return t}drawBullets(){for(let e=this.bullets.length-1;e>=0;e--){let t=this.bullets[e];t.up(),t.y<=0-t.size?this.bullets.splice(e,1):t.draw()}}draw(){m.drawImage(this.icon,this.x,this.y,this.size.width,this.size.height),this.drawBullets()}}(g),u.innerText=this.score,d.innerText=this.score,this.setStatus("playing"),this.updata()},updata:function(){let e=this.opts,t=this.enemys,s=f-e.canvasPadding-e.planeSize.height;if(m.clearRect(0,0,y,f),this.updataEnemy(),this.updataPlane(),u.innerText=this.score,d.innerText=this.score,0!==t.length)t[t.length-1].y>=s?this.end("failed"):(this.draw(),i(()=>{this.updata()}));else{let t=e.level===e.totalLevel?"all-success":"success";this.end(t)}},updataPlane:function(){this.Keyboard.pressLeft&&this.plane.translate("left"),this.Keyboard.pressRight&&this.plane.translate("right"),this.Keyboard.pressSpace&&this.plane.shoot(),this.plane.x=Math.max(this.plane.x,this.opts.canvasPadding),this.plane.x=Math.min(this.plane.x,y-this.opts.canvasPadding-this.plane.size.width)},updataEnemy:function(){let e=this.enemys,t=this.opts,s=t.canvasPadding,i=y-s-t.enemySize,n=function(e){let t=null,s=null;return e.forEach(e=>{t=t||e.x,s=s||e.x,t=e.x>t?e.x:t,s=e.x<s?e.x:s}),{max:t,min:s}}(e),a=!1;(n.min<s||n.max>i)&&(t.enemyDirection="left"===t.enemyDirection?"right":"left",a=!0);for(let s=e.length-1;s>=0;s--){let i=e[s];switch(a&&i.down(),i.translate(t.enemyDirection),i.status){case"normal":this.plane.hasHit(i)&&i.booming();break;case"booming":i.booming();break;case"died":e.splice(s,1),this.score+=1}}},draw:function(){this.enemys.forEach(function(e){e.draw()}),this.plane.draw()},end:function(e){switch(e){case"failed":this.setStatus("failed"),u.innerHTML=`${this.score}`;break;case"success":this.setStatus("success"),c.innerHTML=`下一个Level： ${this.opts.level+1}`;break;case"all-success":this.setStatus("all-success")}}}).init()},8:function(e,t){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,